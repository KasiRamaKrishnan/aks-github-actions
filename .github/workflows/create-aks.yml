name: Create AKS and Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create --name ${{ secrets.RESOURCE_GROUP }} --location ${{ secrets.LOCATION }}

      - name: Create AKS Cluster
        run: |
          az aks create --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }} \
          --node-count 1 --enable-managed-identity --generate-ssh-keys

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }} --overwrite-existing

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Add Helm Repos
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

      - name: Install NGINX Ingress Controller
        run: |
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.service.type=LoadBalancer \
            --set controller.service.externalTrafficPolicy=Local \
            --set controller.service.healthCheckNodePort=32567

      - name: Install ArgoCD (ClusterIP Service)
        run: |
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd --create-namespace \
            --set server.service.type=ClusterIP \
            -f helm/argocd-values.yaml

      - name: Apply ArgoCD Ingress Route
        run: |
          kubectl apply -f manifests/argocd-http-ingress.yaml

      - name: Get Ingress Controller Public IP
        id: get_ip
        run: |
          IP=""
          for i in {1..20}; do
            IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "Public IP found: $IP"
              break
            else
              echo "Waiting for LoadBalancer IP..."
              sleep 15
            fi
          done
          if [ -z "$IP" ]; then
            echo "Public IP not found after waiting. Exiting..."
            exit 1
          fi
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Configure DNS Record for ArgoCD
        run: |
          az network dns record-set a create \
            --resource-group ${{ secrets.DNS_RESOURCE_GROUP }} \
            --zone-name ${{ secrets.DNS_ZONE_NAME }} \
            --name "argocd-kasi" \
            --ttl 300

          az network dns record-set a add-record \
            --resource-group ${{ secrets.DNS_RESOURCE_GROUP }} \
            --zone-name ${{ secrets.DNS_ZONE_NAME }} \
            --record-set-name "argocd-kasi" \
            --ipv4-address ${{ steps.get_ip.outputs.ip }}
